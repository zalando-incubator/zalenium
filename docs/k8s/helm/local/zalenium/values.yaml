hub:
  ## The repository and image
  ## ref: https://hub.docker.com/r/selenium/hub/
  image: "dosel/zalenium"

  ## The tag for the image
  ## ref: https://hub.docker.com/r/selenium/hub/tags/
  tag: "3"

  ## Specify a imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  pullPolicy: "IfNotPresent"

  ## The port which the hub listens on
  port: 4444

  ## Timeout for probe Hub readiness via HTTP request on Hub console
  readinessTimeout: 1

  ## Set the JAVA_OPTS environment variable
  ## If you find your selenium hub is OOMKilled, try adding -XX:+UseSerialGC
  javaOpts: "-Xmx400m -XX:+UseSerialGC"

  ## Set the SE_OPTS environment variable
  ## ref: http://www.seleniumhq.org/docs/07_selenium_grid.jsp#node-configuration
  # seOpts:

  ## Defining a JMX port will open the port on the container, however, it
  ## requires additional javaOpts, ie
  ## javaOpts: >
  ##   -Dcom.sun.management.jmxremote.port=4000
  ##   -Dcom.sun.management.jmxremote.authenticate=false
  ##   -Dcom.sun.management.jmxremote.ssl=false
  ## ref: http://openjdk.java.net/groups/jmx/
  # jmxPort: 4000

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    limits:
      cpu: ".5"
      memory: "512Mi"

  ## The type of service to create
  ##   Values: ClusterIP, NodePort, LoadBalancer, or ExternalName
  ## ref: https://kubernetes.io/docs/user-guide/services/
  serviceType: "NodePort"

  ## If serviceType is LoadBalancer:
  ##   Add list of IPs allowed to connect to the service
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
  serviceSourceRanges: ["0.0.0.0/0"]

  ## Control where client requests go, to the same pod or round-robin
  ##   Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/user-guide/services/
  serviceSessionAffinity: "None"

  ## Start arguments for Zalenium hub itself
  ## https://github.com/zalando/zalenium/blob/master/docs/usage_examples.md
  desiredContainers: 2
  maxDockerSeleniumContainers: 10
  sauceLabsEnabled: false
  browserStackEnabled: false
  testingBotEnabled: false
  videoRecordingEnabled: true
  cpuRequest: 500m
  cpuLimit: 1000m
  memRequest: 500Mi
  screenWidth: 1440
  screenHeight: 900
  timeZone: "UTC"
  seleniumImageName: "elgalu/selenium"
  maxTestSessions: 1
  debugEnabled: false
  keepOnlyFailedTests: false
  retentionPeriod: 3
  sendAnonymousUsageInfo: true
  basicAuth:
    enabled: false
    username: "zalenium"
    password: "password"

  # Environment variables passed to Zalenium hub.
  sauceUserName: blank
  sauceAccessKey: blank
  browserStackUser: blank
  browserStackKey: blank
  testingBotKey: blank
  testingBotSecret: blank

serviceAccount:
  create: false
  ## Use the following Kubernetes Service Account name if not created
  name: 

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: false
  data:
    ## If true will use existing PVC instead of creating one
    # useExisting: false
    ## Name of existing PVC to be used in the zalenium deployment
    # name:
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteMany
    size: 80Gi
  video:
    ## If true will use existing PVC instead of creating one
    # useExisting: false
    ## Name of existing PVC to be used in the zalenium deployment
    # name:
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteMany
    size: 80Gi

ingress:
  enabled: false
  tls: false
  # secretName: my-tls-cert # only needed if tls above is true
  hostname: zalenium.foobar.com
  annotations:
    # kubernetes.io/ingress.class: "nginx"
    # kubernetes.io/tls-acme: "true"
  ## For RBAC support:
  
rbac:
  create: false
  ## Run the zalenium hub container with the ability to deploy/manage containers of jobs
  ## cluster-wide or only within namespace
  clusterWideAccess: false